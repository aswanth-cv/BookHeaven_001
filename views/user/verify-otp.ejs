<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>OTP Verification</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/styles/user/verifyOtp.css">
  </head>
  <body>
    <div class="container">
      <div class="otp-card">
        <div class="otp-header">
          <i class="fas fa-shield-alt otp-icon"></i>
          <h3 class="mb-0">OTP Verification</h3>
        </div>

        <div class="otp-body">
          <p class="text-center mb-1">Enter the verification code sent to</p>
          <h5 class="text-center mb-4" id="userEmail">
            <%= maskedEmail || 'your***@example.com' %>
          </h5>

          <!-- Timer display -->
          <div class="timer-container">
            <p>Code expires in: <span class="timer" id="timer">00:30</span></p>
            <p class="timer-expired" id="timerExpired">OTP has expired. Please request a new one.</p>
          </div>

          <form id="otpForm">
            <div class="otp-inputs">
              <input
                type="text"
                class="otp-input"
                name="digit1"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit2"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit3"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit4"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit5"
                maxlength="1"
                required
              />
              <input
                type="text"
                class="otp-input"
                name="digit6"
                maxlength="1"
                required
              />
            </div>

            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-verify btn-primary">
                Verify
              </button>
            </div>
          </form>

          <div id="statusMessage" class="status-message"></div>

          <div class="text-center mt-4">
            <p class="mb-1">Didn't receive the code?</p>
            <a href="#" class="btn-resend" id="resendBtn">Resend Code</a>
          </div>
        </div>
      </div>
    </div>
   <script>
  const inputs = document.querySelectorAll(".otp-input");
  const otpForm = document.getElementById("otpForm");
  const statusMessage = document.getElementById("statusMessage");
  const resendBtn = document.getElementById("resendBtn");
  const timerElement = document.getElementById("timer");
  const timerExpiredElement = document.getElementById("timerExpired");
  const submitBtn = otpForm.querySelector('button[type="submit"]');

  let timeLeft = 30;
  let timerId;

  // Start timer function
  function startTimer() {
    timerElement.style.display = 'inline';
    timerExpiredElement.style.display = 'none';
    submitBtn.disabled = false;

    if (timerId) clearInterval(timerId);

    timeLeft = 60;
    updateTimerDisplay();

    resendBtn.disabled = true; // disable resend during countdown
    resendBtn.style.pointerEvents = 'none'; //  also block interaction visually

    timerId = setInterval(() => {
      timeLeft -= 1;
      updateTimerDisplay();

      if (timeLeft <= 0) {
        clearInterval(timerId);
        handleExpiredOTP();
        resendBtn.disabled = false; // enable resend after timer
        resendBtn.style.pointerEvents = 'auto'; //  allow interaction again
      }
    }, 1000);
  }

  function updateTimerDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

    timerElement.style.color = timeLeft <= 10 ? '#dc3545' : '#212529';
  }

  function handleExpiredOTP() {
    timerElement.style.display = 'none';
    timerExpiredElement.style.display = 'block';
    submitBtn.disabled = true;
    showStatus('OTP has expired. Please request a new one.', 'error');
  }

  inputs.forEach((input, index) => {
    input.addEventListener("input", (e) => {
      let value = input.value.replace(/\D/g, '');
      input.value = value;
      if (value.length === 1 && index < inputs.length - 1) {
        inputs[index + 1].focus();
      }
    });

    input.addEventListener("keypress", (e) => {
      if ([8, 9, 27, 13, 46].includes(e.keyCode) ||
          (e.keyCode === 65 && e.ctrlKey) ||
          (e.keyCode === 67 && e.ctrlKey) ||
          (e.keyCode === 86 && e.ctrlKey) ||
          (e.keyCode === 88 && e.ctrlKey)) {
        return;
      }

      if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&
          (e.keyCode < 96 || e.keyCode > 105)) {
        e.preventDefault();
      }
    });

    input.addEventListener("keydown", (e) => {
      if (e.key === "Backspace" && input.value === "" && index > 0) {
        inputs[index - 1].focus();
      }
    });

    input.addEventListener("paste", (e) => {
      e.preventDefault();
      const paste = (e.clipboardData || window.clipboardData).getData('text');
      const digitsOnly = paste.replace(/\D/g, '');
      if (digitsOnly) {
        for (let i = 0; i < digitsOnly.length && (index + i) < inputs.length; i++) {
          inputs[index + i].value = digitsOnly[i];
        }
        const nextIndex = Math.min(index + digitsOnly.length, inputs.length - 1);
        inputs[nextIndex].focus();
      }
    });
  });

  otpForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (timeLeft <= 0) {
      showStatus('OTP has expired. Please request a new one.', 'error');
      return;
    }

    const otpDigits = Array.from(inputs).map(input => input.value);
    const otpCode = otpDigits.join('');

    if (otpDigits.some(d => d === '')) {
      showStatus('Please enter all 6 digits of the OTP code', 'error');
      return;
    }

    if (otpDigits.some(d => !/^\d$/.test(d))) {
      showStatus('OTP must contain only numbers', 'error');
      return;
    }

    const formData = {
      otp: otpCode,
      email: document.getElementById('userEmail').textContent.trim()
    };

    try {
      const originalBtnText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Verifying...';

      const response = await fetch('/verify-otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();

      submitBtn.disabled = false;
      submitBtn.textContent = originalBtnText;

      if (data.success) {
        clearInterval(timerId);
        showStatus('OTP verified successfully! Redirecting...', 'success');
        setTimeout(() => {
          window.location.href = '/login';
        }, 2000);
      } else {
        showStatus(data.message || 'Invalid OTP. Please try again.', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      showStatus('Failed to verify OTP. Please try again.', 'error');
      submitBtn.disabled = false;
      submitBtn.textContent = originalBtnText;
    }
  });

  resendBtn.addEventListener('click', async (e) => {
    e.preventDefault();

    // ðŸ”§ Prevent resending before timer ends
    if (timeLeft > 0) {
      showStatus(`Please wait ${timeLeft} seconds before resending OTP.`, 'error'); // Added
      return;
    }

    const email = document.getElementById('userEmail').textContent.trim();

    try {
      resendBtn.textContent = 'Sending...';
      resendBtn.disabled = true;
      resendBtn.style.pointerEvents = 'none';

      const response = await fetch('/resend-signup-otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email })
      });

      const data = await response.json();

      if (data.success) {
        showStatus('New OTP code sent successfully!', 'success');
        startTimer(); //  This restarts the timer only after success

        inputs.forEach(input => input.value = '');
        inputs[0].focus();
      } else {
        showStatus(data.message || 'Failed to resend OTP. Please try again.', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      showStatus('Failed to resend OTP. Please try again.', 'error');
    } finally {
      resendBtn.textContent = 'Resend Code';
    }
  });

  function showStatus(message, type) {
    statusMessage.textContent = message;
    statusMessage.className = 'status-message';
    statusMessage.classList.add(type === 'success' ? 'status-success' : 'status-error');
    statusMessage.style.display = 'block';

    setTimeout(() => {
      statusMessage.style.display = 'none';
    }, 5000);
  }

  document.addEventListener('DOMContentLoaded', () => {
    startTimer();
  });
</script>

  </body>
</html>